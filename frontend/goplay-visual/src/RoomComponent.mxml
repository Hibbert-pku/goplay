<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="961" height="548" xmlns:ns1="*">

	<fx:Script>
		<![CDATA[
			import comm.Conn;
			import comm.protocol.ClientProtocol;
			import comm.protocol.server.Room;
			import comm.protocol.server.User;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.utils.ObjectUtil;
			
			public static var rooms:Dictionary = new Dictionary();
			public var roomname:String;
			public var chatid:int;
			// ***
			include "command_handler/room_RoomComponent.as";
			include "RoomChat.as";
			// ---

			// para que no se pueda hacer spam de chat_requests
			// mapea trans:player a los que se le envio un chat_request y no han respondido
			private var chat_requests:Dictionary = new Dictionary();
			private var chat_request_players:ArrayList = new ArrayList();
			
			// para que no se pueda hacer spam de game_requests
			// mapea trans:player a los que se le envio un player_request y no han respondido
			private var game_requests:Dictionary = new Dictionary();
			private var game_request_players:ArrayList = new ArrayList();
			
			public function init(name:String):void {
				roomname = name;
				rooms[roomname] = this;
				
				//get players
				var obj2:Object = Room.getUsersFromRoom(roomname);
				Main.conn.addResponseHandler(fillPlayersGrid,obj2.trans);
				Main.conn.send(obj2);
			}
			
			public function fillPlayersGrid(object:Object):void {
				trace("filling player_grid");
				
				player_grid.dataProvider = object.users;
				ClientProtocol.setCommandHandler('room.remove_public_game_request', remove_public_game_request);
				ClientProtocol.setCommandHandler('game.new_public_game_request', new_public_game_request);
				ClientProtocol.setCommandHandler('room.adduser', roomCHandler_adduser);
				ClientProtocol.setCommandHandler('room.removeuser', roomCHandler_removeuser);
			}
			
			public function addPlayer(name:String):void {
				var users:Array = player_grid.dataProvider.toArray();
				if (users.indexOf(name) == -1)
					player_grid.dataProvider.addItem(name);
			}
			
			public function removePlayer(name:String):void {
				var users:Array = player_grid.dataProvider.toArray();
				player_grid.dataProvider.removeItemAt(users.indexOf(name));
			}
			
			protected function playRequestResponse(obj:Object):void {
				var player:String = game_requests[obj.trans];
				delete game_requests[obj.trans];
				game_request_players.removeItem(player);
				
				if (obj.code == 305) { // game accepted
					// TODO: crear tab de juego con game_id = obj.game_id
					trace('gameRequestResponse', 'ready to play in game_id', obj.game_id)
				}
			}
			
			protected function playButton_clickHandler(event:MouseEvent):void
			{
				var player:Object = player_grid.selectedItem;
				
				if (player != null) {
					if(playButton.label != "Request") {
						playerQueueColor.visible = true;
						playerQueueSize.visible = true;
						playButton.label = "Request";
					} else {
						playerQueueColor.visible = false;
						playerQueueSize.visible = false;
						playButton.label = "play";
						var obj:Object = User.start_game(player.toString(), playerQueueColor.selectedItem, roomname, playerQueueSize.selectedItem);
						Main.conn.addResponseHandler(playRequestResponse,obj.trans);
						Main.conn.send(obj);
						game_requests[obj.trans] = obj.username;
						game_request_players.addItem(player);
					}
				}

			}

			protected function chatRequestResponse(obj:Object):void {
				var player:String = chat_requests[obj.trans];
				delete chat_requests[obj.trans];
				chat_request_players.removeItem(player);
				
				if (obj.code == 303) { // chat accepted
					parentApplication.createRoomNavigatorContent_ChatOnly("chat: "+obj.user, obj.chat_id);
				}
			}

			
			protected function chatButton_clickHandler(event:MouseEvent):void
			{
				var player:String = player_grid.selectedItem.toString();
				
				if (chat_request_players.getItemIndex(player) == -1) {
					trace(Main.currentUser,"request chat with:",player_grid.selectedItem)
					var obj:Object = User.start_chat(player);
					Main.conn.addResponseHandler(chatRequestResponse,obj.trans);
					Main.conn.send(obj);
			
					chat_requests[obj.trans] = obj.username;
					chat_request_players.addItem(player);
				}
			}


			protected function requestGameB_clickHandler(event:MouseEvent):void
			{
				trace("Request a public game");
				if(queueSize.selectedItem != 0) {
					var obj:Object = Room.request_public_game(roomname,queueColor.selectedItem,queueSize.selectedItem);
					Main.conn.send(obj);
				}
			}
			
			protected function new_public_game_request(conn:Conn,trans:int, white_plyr_a:String,black_plyr_a:String,size_a:int,status_a:String, gameid_a:int):void {
				trace("new_public_game_requested");
				currentGames.dataProvider.addItem({
					white_plyr:white_plyr_a,
					black_plyr:black_plyr_a,
					size:size_a,
					status:status_a,
					gameid:gameid_a})
			}

			protected function fillGamesGrid(obj:Object):void {
				trace("filling games grid", obj.lista.toString());

				currentGames.dataProvider = new ArrayList();
				
				for (var i:Object in obj.lista) {
					trace("####",obj.lista[i]);
					currentGames.dataProvider.addItem(obj.lista[i]);
				}
			}
			protected function currentGames_creationCompleteHandler(event:FlexEvent):void
			{
				trace("filling games grid name=",roomname);
				var obj2:Object = Room.get_public_games_list(roomname)
				Main.conn.addResponseHandler(fillGamesGrid,obj2.trans);
				Main.conn.send(obj2);
			}

			
			protected function queueColor_creationCompleteHandler(event:FlexEvent):void
			{
				queueColor.dataProvider = new ArrayList();
				queueColor.dataProvider.addItem('black');
				queueColor.dataProvider.addItem('white');
				queueColor.selectedItem = queueColor.dataProvider.getItemAt(0);
				
			}
			
			protected function playerQueueColor_creationCompleteHandler(event:FlexEvent):void
			{
				playerQueueColor.dataProvider = new ArrayList();
				playerQueueColor.dataProvider.addItem('black');
				playerQueueColor.dataProvider.addItem('white');
				playerQueueColor.selectedItem = playerQueueColor.dataProvider.getItemAt(0); 
				playerQueueColor.visible = false;
				
			}

			protected function remove_public_game_request(conn:Conn,trans:int, room:String, white_plyr:String, black_plyr:String, gameid:int):void {
				trace("remove public game request");
				var a:ArrayList = new ArrayList();
				
				for(var i:int = 0; i<currentGames.dataProvider.length; i++){
					var obj:Object = currentGames.dataProvider[i];
					trace("$$%$%$%$:",obj.toString(),obj['white_plyr'].toString())
					
					if(obj['white_plyr'].toString()==white_plyr && obj['black_plyr'].toString()==black_plyr) {
						trace("removing");
						currentGames.dataProvider.removeItemAt(i);
					}
						
				}
			}
			protected function queueSize_creationCompleteHandler(event:FlexEvent):void
			{
				queueSize.dataProvider = new ArrayList();
				queueSize.dataProvider.addItem(9);
				queueSize.dataProvider.addItem(13);
				queueSize.dataProvider.addItem(19);
				queueSize.selectedItem = queueSize.dataProvider.getItemAt(0);
			}
			protected function playerQueueSize_creationCompleteHandler(event:FlexEvent):void
			{
				playerQueueSize.dataProvider = new ArrayList();
				playerQueueSize.dataProvider.addItem(9);
				playerQueueSize.dataProvider.addItem(13);
				playerQueueSize.dataProvider.addItem(19);
				playerQueueSize.selectedItem = playerQueueSize.dataProvider.getItemAt(0);
				playerQueueSize.visible = false;
			}


			protected function currentGames_itemDoubleClickHandler(event:ListEvent):void
			{
				//if game is not complete we join the game
				var size:int = currentGames.selectedItem["size"];
				var obj:Object;
				if (currentGames.selectedItem['white_plyr'] == "") {
					obj = Room.request_public_game(roomname,"white",size);
					Main.conn.send(obj);
					return;
				}else if(currentGames.selectedItem['black_plyr'] == ""){
					obj = Room.request_public_game(roomname,"black",size);
					Main.conn.send(obj);
					return;
				}
				//if the game is complete we join as an espectator
				trace("####################>>>>>>>>>>>>>");
				trace(currentGames.selectedItem["gameid"]);
				obj = User.watch_game(currentGames.selectedItem["gameid"]);
				Main.conn.send(obj);
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:Fade id="fadeIn" alphaFrom="0.0" alphaTo="1.0" />
		<mx:Fade id="fadeOut" alphaFrom="1.0" alphaTo="0.0" />
	</fx:Declarations>
	<mx:DataGrid id="player_grid" x="501" y="10" width="158" height="448"  toolTip="Here are listed the Player that are in this room. you can select one from this list and then choose if you want to chat or play against one filling the options that appear and clicking the 'Play Game' button.">
		<mx:columns>
			<mx:DataGridColumn headerText="Players" dataField="col1"/>
		</mx:columns>
	</mx:DataGrid>
	<ns1:ChatComponent x="10" y="313" id="chatComponent" creationComplete="chat_creationCompleteHandler(event)" height="201">
	</ns1:ChatComponent>
	<mx:DataGrid x="10" y="10" width="476" height="269" id="currentGames" creationComplete="currentGames_creationCompleteHandler(event)" toolTip="Here is a list of the Current Games that are being held right now or the ones that are on stanby. By Double-Clicking on one that it's status is 'Started' you can watch the game :). If you want to create a new game, edit your game option below and click the &quot;create new Game&quot; Button Below and wait for someone that accepts to play with you." doubleClickEnabled="true" itemClick="currentGames_itemDoubleClickHandler(event)">
		<mx:columns>
			<mx:DataGridColumn headerText="White" dataField="white_plyr"/>
			<mx:DataGridColumn headerText="Black" dataField="black_plyr"/>
			<mx:DataGridColumn headerText="Size" dataField="size"/>
			<mx:DataGridColumn headerText="Game Status" dataField="status"/>
			<mx:DataGridColumn headerText="Game id" dataField="gameid"/>
			
		</mx:columns>
	</mx:DataGrid>
	<s:Button x="508" y="462" label="Chat" click="chatButton_clickHandler(event)" id="chatButton" toolTip="click Here after selecting a player of the list above to start chatting with him."/>
	<s:Button x="580" y="462" label="Play" id="playButton" click="playButton_clickHandler(event)" toolTip="click Here after selecting a Player on the list above, edit the settings in the combo boxes that appear below and click again this button to start a new game."/>
	<s:Button toolTip="Click this button After you select the color of stone you want, the board size in the two combo Boxes on the right Create a new Game and wait for someone that wants to play with you." x="10" 
			  y="287" label="Create New Game" id="requestGameB" click="requestGameB_clickHandler(event)"/>
	<s:DropDownList x="215" y="288" width="92" id="queueColor" creationComplete="queueColor_creationCompleteHandler(event)" toolTip="Here you can select wich color of stone you want if is black or white. Select The Board Size in the combo box on the right and Click the 'Create New Game' Button to Create a new Game and wait for someone that accept to play with you."></s:DropDownList>
	
	
	<s:DropDownList x="502" y="489" width="88" id="playerQueueColor" creationComplete="playerQueueColor_creationCompleteHandler(event)"></s:DropDownList>
	<s:DropDownList x="422" y="287" width="64" id="queueSize" creationComplete="queueSize_creationCompleteHandler(event)" toolTip="Here you can select wich size of board you want to play. the sizes are: 9x9, 13x13 and 19x19, then you can select the color of stone you like in the combo box on the right and then click the 'Create New Game' Button to create a new game and wait for someone who wants to play with you. Remember that while bigger the board, more time it will take to finish and more complex the game will be."></s:DropDownList>
	<s:Label x="170" y="292" text="Color" fontWeight="bold" fontSize="13" enabled="true" color="#534400"/>
	<s:Label x="341" y="292" text="Board Size" fontWeight="bold" enabled="true" color="#534400"/>
	<s:DropDownList x="595" y="489" width="64" id="playerQueueSize" creationComplete="playerQueueSize_creationCompleteHandler(event)"></s:DropDownList>
	<mx:ViewStack x="667" y="10" id="howto_viewStack" width="275" height="486">
		<s:NavigatorContent label="index" width="100%" height="100%" id="index" showEffect="fadeIn" hideEffect="fadeOut">
			<s:Label x="10" y="10" text="Help How To's:" fontSize="24" fontWeight="bold"/>
			<mx:LinkButton x="4" y="58" label="Start a private chat with a player  &gt;&gt;" click="{howto_viewStack.selectedChild = player_howto}" fontSize="13"/>
			<mx:LinkButton x="4" y="82" label="Challenge a player to play a game &gt;&gt;" fontSize="13" click="{howto_viewStack.selectedChild = challenge_howto}"/>
		</s:NavigatorContent>
		<s:NavigatorContent label="How To 1" width="100%" height="100%" id="player_howto" showEffect="fadeIn" hideEffect="fadeOut">
			<mx:Image x="7" y="2" source="@Embed(source='artwork/howto1.png')"/>
			<mx:LinkButton x="10" y="460" label="Back to Index &gt;&gt;" fontSize="12" click="{howto_viewStack.selectedChild = index}"/>
			<mx:LinkButton x="10" y="433" label="Next: Challenge a player to a game &gt;&gt;" fontSize="12" click="{howto_viewStack.selectedChild = challenge_howto}"/>
		</s:NavigatorContent>
		<s:NavigatorContent label="challenge how To" width="100%" height="100%" id="challenge_howto" showEffect="fadeIn" hideEffect="fadeOut">
			<mx:Image x="6" y="6" source="@Embed(source='artwork/howto2.png')"/>
			<mx:LinkButton x="10" y="438" label="Next: Create a new free game &gt;&gt;" fontSize="12"/>
			<mx:LinkButton x="10" y="460" label="Back to Index &gt;&gt;" fontSize="12" click="{howto_viewStack.selectedChild = index}"/>
		</s:NavigatorContent>
	</mx:ViewStack>
	
</s:Group>
